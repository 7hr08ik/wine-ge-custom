diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
index e069fbba20..706791ec9d 100644
--- a/dlls/ntdll/signal_x86_64.c
+++ b/dlls/ntdll/signal_x86_64.c
@@ -2113,6 +2113,34 @@ NTSTATUS context_from_server( CONTEXT *to, const context_t *from )
     return STATUS_SUCCESS;
 }
 
+/*
+ * MH:W Iceborne patch
+ *
+ * Don't set debug registers, which requires an
+ * expensive call to wineserver
+ */
+
+#define MHW_STEAM_ID	"582010"
+#define MHW_CHECK_TODO	(-2)
+#define MHW_CHECK_YES	(1)
+#define MHW_CHECK_NO	(0)
+#define MHW_UNLIKELY(x)	__builtin_expect(!!(x),0)
+
+static int is_mhw_running(void) {
+	static int mhw_running_flag = MHW_CHECK_TODO;
+
+	/* don't care if we execute the below
+	 * spuriously */
+	if(MHW_UNLIKELY(mhw_running_flag == MHW_CHECK_TODO)) {
+		const char*	p_gameid = getenv("SteamGameId");
+		const int  	is_running = (!p_gameid || strcmp(p_gameid, MHW_STEAM_ID)) ? MHW_CHECK_NO : MHW_CHECK_YES;
+		/* atomic CAS */
+		__sync_bool_compare_and_swap(&mhw_running_flag, MHW_CHECK_TODO, is_running);
+	}
+
+	return mhw_running_flag == MHW_CHECK_YES;
+}
+
 
 /***********************************************************************
  *              NtSetContextThread  (NTDLL.@)
@@ -2124,13 +2152,15 @@ NTSTATUS WINAPI NtSetContextThread( HANDLE handle, const CONTEXT *context )
     BOOL self = (handle == GetCurrentThread());
 
     /* debug registers require a server call */
-    if (self && (context->ContextFlags & (CONTEXT_DEBUG_REGISTERS & ~CONTEXT_AMD64)))
-        self = (amd64_thread_data()->dr0 == context->Dr0 &&
-                amd64_thread_data()->dr1 == context->Dr1 &&
-                amd64_thread_data()->dr2 == context->Dr2 &&
-                amd64_thread_data()->dr3 == context->Dr3 &&
-                amd64_thread_data()->dr6 == context->Dr6 &&
-                amd64_thread_data()->dr7 == context->Dr7);
+    if(!is_mhw_running()) {
+    	if (self && (context->ContextFlags & (CONTEXT_DEBUG_REGISTERS & ~CONTEXT_AMD64)))
+        	self = (amd64_thread_data()->dr0 == context->Dr0 &&
+                	amd64_thread_data()->dr1 == context->Dr1 &&
+                	amd64_thread_data()->dr2 == context->Dr2 &&
+                	amd64_thread_data()->dr3 == context->Dr3 &&
+                	amd64_thread_data()->dr6 == context->Dr6 &&
+                	amd64_thread_data()->dr7 == context->Dr7);
+    }
 
     if (!self)
     {
@@ -2158,7 +2188,18 @@ NTSTATUS WINAPI NtGetContextThread( HANDLE handle, CONTEXT *context )
     needed_flags = context->ContextFlags;
 
     /* debug registers require a server call */
-    if (context->ContextFlags & (CONTEXT_DEBUG_REGISTERS & ~CONTEXT_AMD64)) self = FALSE;
+    if(!is_mhw_running()) {
+    	if (context->ContextFlags & (CONTEXT_DEBUG_REGISTERS & ~CONTEXT_AMD64)) self = FALSE;
+    } else {
+	if (context->ContextFlags & (CONTEXT_DEBUG_REGISTERS & ~CONTEXT_AMD64)) {
+        	context->Dr0 = amd64_thread_data()->dr0;
+        	context->Dr1 = amd64_thread_data()->dr1;
+        	context->Dr2 = amd64_thread_data()->dr2;
+       		context->Dr3 = amd64_thread_data()->dr3;
+        	context->Dr6 = amd64_thread_data()->dr6;
+        	context->Dr7 = amd64_thread_data()->dr7;
+    	}
+    }
 
     if (!self)
     {
